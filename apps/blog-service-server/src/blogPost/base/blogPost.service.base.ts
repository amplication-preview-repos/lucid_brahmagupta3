/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BlogPost as PrismaBlogPost,
  Tag as PrismaTag,
  Author as PrismaAuthor,
  Category as PrismaCategory,
} from "@prisma/client";

export class BlogPostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BlogPostCountArgs, "select">): Promise<number> {
    return this.prisma.blogPost.count(args);
  }

  async blogPosts(
    args: Prisma.BlogPostFindManyArgs
  ): Promise<PrismaBlogPost[]> {
    return this.prisma.blogPost.findMany(args);
  }
  async blogPost(
    args: Prisma.BlogPostFindUniqueArgs
  ): Promise<PrismaBlogPost | null> {
    return this.prisma.blogPost.findUnique(args);
  }
  async createBlogPost(
    args: Prisma.BlogPostCreateArgs
  ): Promise<PrismaBlogPost> {
    return this.prisma.blogPost.create(args);
  }
  async updateBlogPost(
    args: Prisma.BlogPostUpdateArgs
  ): Promise<PrismaBlogPost> {
    return this.prisma.blogPost.update(args);
  }
  async deleteBlogPost(
    args: Prisma.BlogPostDeleteArgs
  ): Promise<PrismaBlogPost> {
    return this.prisma.blogPost.delete(args);
  }

  async findTags(
    parentId: string,
    args: Prisma.TagFindManyArgs
  ): Promise<PrismaTag[]> {
    return this.prisma.blogPost
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tags(args);
  }

  async getAuthor(parentId: string): Promise<PrismaAuthor | null> {
    return this.prisma.blogPost
      .findUnique({
        where: { id: parentId },
      })
      .author();
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.blogPost
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
}
